{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 TrebuchetMS;\f1\fnil\fcharset0 Verdana;\f2\fswiss\fcharset0 ArialMT;
\f3\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red67\green67\blue67;\red1\green21\blue44;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl300\sa256\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You are to implement GTThreads -- a\'a0preemptive\'a0user-level thread package with an API similar to Pthreads (details below). You are to demonstrate your library by further implementing a solution to the classic Dining Philosophers problem.\
First you must implement the core of the thread library as well as a thread scheduler. The scheduler must be a\'a0preemptive round robin\'a0scheduler. Each thread is assigned a time slice (its quantum) for which it is allowed to run; a thread is preempted if it used up its quantum. Preemption can be achieved by using an alarm signal as a timer. You may use the system's virtual time instead of wall-clock time, man setitimer(2) for details. The preemption period in microseconds should be specified in a function, (i.e.
\f1 gtthread_init(period)
\f0 ). Any program using your GTThreads package must call the function first.\uc0\u8232 \u8232 \
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 Collaboration
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 Students are allowed to discuss concepts and techniques for solving development problems. However, sharing implementations and code is not allowed. Each student is expected to turn in code that he/she wrote him/herself.\uc0\u8232 \u8232 \
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 GTThreads API
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa0\partightenfactor0
\cf2 The GTThreads API should contain the following functions. The library interface must match the one specified here\'a0exactly. If the signature is different, and as a result, your code is not compiled with test cases,\'a0you will get 0 credit.\uc0\u8232 \u8232 \
\pard\pardeftab720\sl320\sa0\partightenfactor0

\f1 \cf2 void gtthread_init(long period);
\fs32 \uc0\u8232 
\fs26 int\'a0 gtthread_create(gtthread_t *thread,
\fs32 \uc0\u8232 
\fs26 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 void *(*start_routine)(void *),
\fs32 \uc0\u8232 
\fs26 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 void *arg);
\fs32 \uc0\u8232 
\fs26 int\'a0 gtthread_join(gtthread_t thread, void **status);
\fs32 \uc0\u8232 
\fs26 void gtthread_exit(void *retval);
\fs32 \uc0\u8232 
\fs26 int\'a0 gtthread_yield(void);
\fs32 \uc0\u8232 
\fs26 int\'a0 gtthread_equal(gtthread_t t1, gtthread_t t2);
\fs32 \uc0\u8232 
\fs26 int\'a0 gtthread_cancel(gtthread_t thread);
\fs32 \uc0\u8232 
\fs26 gtthread_t gtthread_self(void);
\f0 \
\pard\pardeftab720\sl300\sa0\partightenfactor0
\cf2 \uc0\u8232 Next, you have to implement a mutex synchronization primitive to enable safe concurrent manipulation of shared data. The API for the mutex primitive should be as follows:\u8232 \u8232 \
\pard\pardeftab720\sl320\sa0\partightenfactor0

\f1 \cf2 int\'a0 gtthread_mutex_init(gtthread_mutex_t *mutex);
\fs32 \uc0\u8232 
\fs26 int\'a0 gtthread_mutex_lock(gtthread_mutex_t *mutex);
\fs32 \uc0\u8232 
\fs26 int\'a0 gtthread_mutex_unlock(gtthread_mutex_t *mutex);
\f0 \uc0\u8232 \u8232 An example\'a0
\f1 gtthread.h
\f0 \'a0header file with prototypes for all the API functions listed here is attached. Feel free to use it, modify it (e.g., to add data structures), or create your own. However, be sure you stick to these prototypes exactly or else our testing/grading code will not be able to bind to it properly.\
\pard\pardeftab720\sl300\sa0\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 GTThreads Semantics
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 Each function in GTThreads is analagous to a PThreads function; simply replace the\'a0
\f1 gtthread_
\f0 \'a0at the beginning with
\f1 pthread_
\f0 . There are two exceptions to this naming pattern:\'a0
\f1 gtthread_init(period)
\f0 \'a0is a unique function to GTThreads, and
\f1 gtthread_yield()
\f0 \'a0is analagous to the PThread function\'a0
\f1 sched_yield()
\f0 . Be sure to 'man' the functions you are emulating so you understand how they're supposed to behave. Consulting other PThreads references will probably be helpful as well. Your GTThreads should behave identically to PThreads, with the following exceptions:\
\pard\pardeftab720\li960\fi-480\sl300\sa256\partightenfactor0
\cf2 1.
\f3\fs18 \'a0\'a0\'a0\'a0
\f0\fs26 The\'a0
\f1 gtthread_init(period)
\f0 \'a0function must be called from the main thread before\'a0
\i any
\i0 \'a0other GTThreads functions are called. It allows the caller to specify the scheduling period (quantum in microseconds), and may also perform any other initialization you deem necessary. Calling other GTThreads functions before the library is initialized is semantically invalid, and you may assume it will not be done; you do not need to check for this as an error condition.\
2.
\f3\fs18 \'a0\'a0\'a0\'a0 
\f0\fs26 The\'a0
\f1 gtthread_create(thread, start_routine, arg)
\f0 \'a0function does not have an\'a0
\f1 attr
\f0 \'a0parameter. All your threads should behave as if they have default PThread attributes (i.e. as if you specified\'a0
\f1 NULL
\f0 \'a0for\'a0
\f1 attr
\f0 ).\
3.
\f3\fs18 \'a0\'a0\'a0\'a0 
\f0\fs26 In addition to not needing to implement attributes, you may have noticed that there is no\'a0
\f1 gtthread_detach(thread)
\f0 function. You are not required to implement detached threads; all threads should be joinable\
4.
\f3\fs18 \'a0\'a0\'a0\'a0 
\f0\fs26 The\'a0
\f1 gtthread_cancel()
\f0 \'a0function does not have to implement deferred cancelation; all cancelled threads should be killed immediately.\
5.
\f3\fs18 \'a0\'a0\'a0\'a0 
\f0\fs26 Instead of a priority scheduler, you should implement a round-robin scheduler. It should still be preemptive, however.\
6.
\f3\fs18 \'a0\'a0\'a0\'a0
\f0\fs26 The\'a0
\f1 gtthread_mutex_init(mutex)
\f0 \'a0function does not have an\'a0
\f1 attr
\f0 \'a0parameter. All your mutexes should behave as if they have default mutex attributes (i.e. as if you specified\'a0
\f1 NULL
\f0 \'a0for\'a0
\f1 attr
\f0 ).\
7.
\f3\fs18 \'a0\'a0\'a0\'a0
\f0\fs26 You are\'a0
\i not
\i0 \'a0required to implement\'a0
\f1 gtthread_mutex_destroy(mutex)
\f0 ,\'a0
\f1 gtthread_mutex_trylock(mutex)
\f0 , or a static initializer (e.g.\'a0
\f1 GTTHREAD_MUTEX_INITIALIZER
\f0 ).\
8.
\f3\fs18 \'a0\'a0\'a0\'a0
\f0\fs26 Many of these pthread functions either return an error code or return non-zero and set\'a0
\f1 errno
\f0 \'a0to an error code when they have an error. These error codes tell the caller what, specifically, went wrong. However, you do not need to return proper error codes in your gtthread library; simply returning non-zero when an error occurrs is good enough, and you do not ever need to set\'a0
\f1 errno
\f0 . (It's also okay for a function to always return zero if it is written in a way that it cannot ever fail. Error returns are only needed when errors occur.)\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 Suggestions
\f0\b0\fs26 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The initial thread of the program (i.e. the one running\'a0
\f1 main()
\f0 \'a0) is a thread exactly like any other. It should have a
\f1 \'a0gtthread_t
\f0 , you should be able to get it by calling\'a0
\f1 gtthread_self()
\f0 \'a0from the initial thread, and you should be able to specify it as an argument to other GTThreads functions. The only difference in the initial thread is how it behaves when you execute a\'a0
\f1 return
\f0 \'a0instruction. You can find details on this difference in the man page for\'a0
\f1 pthread_create
\f0 .\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 One way to achieve preemption is using an alarm signal. In addition, you may use the system's virtual time instead of wall-clock time. Virtual time does not count CPU cycles spent on other processes, and decrements only when the calling process is running. The\'a0
\f1 setitimer()
\f0 \'a0function can be used to generate\'a0
\f1 SIGVTALRM
\f0 \'a0signals at a specified interval. You will need to establish a signal handler for the signal (man signal(2) and signal(7) for more information on signals). Test your package with different scheduling preiods to determine an appropriate value.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 One way to perform context switching is using the\'a0
\f1 makecontext() / getcontext() / setcontext() / swapcontext()
\f0 \'a0functions. Note that these functions do not act like normal C functions, which is in fact the point. Consult the man pages on these functions for details.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The\'a0
\f1 *context()
\f0 \'a0functions are fairly platform-independent, but may be unsafe in signals. If you choose this approach, please report in your README any potential signal-safe issues in your scheduler if there are any.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Work incrementally! First try to implement thread switching before moving on to the nice library interface.\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 The Dining Philosophers
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 Finally, you have to implement a solution to the classic Dining Philosophers problem using Pthreads. The problem statement is as follows:\
\pard\pardeftab720\sl300\sa0\partightenfactor0
\cf2 Five philosophers are sitting at a round table doing their two favorite things: eating and thinking. Each philosopher has their own bowl of rice, but unfortunately there are only five chopsticks for the entire table. The chopsticks are spaced equally around the table, one between each pair of neighboring rice bowls. Whenever a philosopher wants to eat, they must acquire a chopstick from the both the left and the right; if one of the two chopsticks is already in use, then the philosopher must wait hungrily until it is released. Whenever a philosopher wants to stop eating and think for a while, they must release any chopsticks they hold and put them back on the table.\
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 In your implementation, each philosopher should have a thread which alternates between eating and thinking, spending a random amount of time in each mode. Chopsticks are a shared resource and each must be protected by a mutex. Each thread should print out status information, such as "Philosopher #1 is hungry", "Philosopher #1 tries to acquire left chopstick", "Philosopher #1 releases right chopstick", etc.\
VERY IMPORTANT:\'a0Your algorithm should not have deadlocks regardless of the scheduling period used by your thread system and the order that threads run.\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 Example
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 We will go through 25 test cases to evaluate your library. One example (
\f1 test1.c
\f0 ) is attached to this assignment.\
\pard\pardeftab720\sl300\sa0\partightenfactor0
\cf2 This code should be compiled with your library with something like following command:\
\pard\pardeftab720\sl320\sa0\partightenfactor0

\f1 \cf2 gcc -Wall -pedantic -I\{...\} -o test1 test1.c gtthread.a
\f0 \
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 Test Cases Hints
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 Checks thread creation, arguments, return values for different functions, scheduling and preemption.\uc0\u8232 \u8232 \
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 Platform
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa256\partightenfactor0
\cf2 You can develop your code in any architecture. However, make sure that your code runs properly on\'a0
\b Ubuntu 12.04 on 64-bit x86 hardware on the VirtualBox
\b0 , which is what the TA will run your code on. Find the related document, https://piazza.com/class/idfwtpmjm1d4tx?cid=9. Note that some linux distributions and different version of kernel may show different behaviors for the functions mentioned above. If you want to use different platform, please discuss with TA.\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 Reference Code
\f0\b0\fs26 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use the provided steque data structure (in files steque.[ch]) for both your scheduling queue and your mutex locks.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use swapcontext, makecontext, and getcontext functions, which are illustrated in the example program\'a0{\field{\*\fldinst{HYPERLINK "https://github.gatech.edu/sb300/oms-aos-gtthreads/blob/master/tennis.c"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 tennis.c}}, to switch among your threads.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use setitimer, sigaction, sigprocmask, and related functions, which are illustrated in the example program\'a0{\field{\*\fldinst{HYPERLINK "https://github.gatech.edu/sb300/oms-aos-gtthreads/blob/master/defcon.c"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 defcon.c}}, to achieve pre-emption among your threads. Consult this\'a0{\field{\*\fldinst{HYPERLINK "http://www.linuxprogrammingblog.com/all-about-linux-signals?page=show"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 post}}\'a0and the\'a0{\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Unix_signal"}}{\fldrslt \cf4 \ul \ulc4 \strokec4 wikipedia article}}\'a0for more information.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You are also given makefile. Edit it as per your needs.\
\pard\pardeftab720\sl340\sa320\partightenfactor0

\f2\b\fs30 \cf3 \strokec3 Deliverables
\f0\b0\fs26 \cf2 \strokec2 \
\pard\pardeftab720\sl300\sa0\partightenfactor0
\cf2 \'a0 Submit following files on 
\b Udacity :\uc0\u8232 \'a0 \'a0 \'a0
\b0 1. gtthread.h (if modified)\uc0\u8232 \'a0 \'a0 \'a02. gtthread_sched.c\u8232 \'a0 \'a0 \'a03. gtthread_mutex.c\u8232 \'a0 \'a0 \'a04. philosopher.c\u8232 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0\u8232 \'a0 \'a0Do not resubmit/overwrite these files after the due date and time.\u8232 \u8232 \u8232 All the best!\
}